 // callbacks monad
let callbacks = {
  return: \x ->
    \callback -> callback x
  bind: \action1 f ->
    \callback ->
      let callback1 = \x ->
        let action2 = f x
        action2 callback
      action1 callback1
}

let makeCallback = \f ->
    \callback ->
      f ()
      callMaybe callback
let callMaybe callback = if (callback != null) then callback () else null

let fd d = makeCallback (\() -> turtle.fd d)
let lt a = makeCallback (\() -> turtle.lt a)
let rt a = makeCallback(\() -> turtle.rt a)
let pendown = makeCallback(\() -> turtle.pendown ())
let penup = makeCallback(\() -> turtle.penup ())
let setshape name = makeCallback(\() -> turtle.setshape name)
let text t = makeCallback(\() -> turtle.text t)
let font f = makeCallback(\() -> turtle.font f)
let home = makeCallback(\() -> turtle.home ())
let clear = makeCallback(\() -> turtle.clear ())
let wait seconds = (\callback -> setTimeout callback (seconds * 1000))
let say text = makeCallback (\() -> speak text)
let print = window.repl.print
let help = window.repl.help
let color c = makeCallback(\() -> turtle.color c)
let width w = makeCallback(\() -> turtle.width w)
let background color = makeCallback(\() -> turtle.background color)
let bg = background
let interval i f = setInterval f i
let later i f = setTimeout f i 
let lol = text "LOL"

let sequence = \fs ->
  let action = \callback ->
    if empty fs then
      callMaybe callback
    else
      (head fs) (\() -> (sequence (tail fs)) callback)
  tco action

let par = \fs ->
  \callback ->
    let barrier = Barrier callback fs
    map (\f -> f(\() -> barrier.countDown())) fs
    undefined

let repeat n f = sequence (times n f)
let s = sequence
let r = repeat
